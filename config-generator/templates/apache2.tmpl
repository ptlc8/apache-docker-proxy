LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule rewrite_module modules/mod_rewrite.so


{{ $topdomain := env "TOPDOMAIN" | default "localhost" }}
{{ $redirectProtocol := eq (env "REDIRECT_TO_SECURE") "true" | ternary "https" "http" }}


{{ with env "CUSTOM_CONFIG" }}
{{ . }}
{{ end }}
AllowEncodedSlashes NoDecode
ProxyPreserveHost On


{{ if eq (env "DEFAULT_REDIRECT_TO_TOPDOMAIN") "true" }}
<VirtualHost *:80>

    Redirect / {{ $redirectProtocol }}://{{ $topdomain }}/

    #ErrorLog ${APACHE_LOG_DIR}/error.log
    #CustomLog ${APACHE_LOG_DIR}/access.log combined

</VirtualHost>
{{ end }}


{{/* Only keep containers with exposed port */}}
{{ $exposedContainers := list }}
{{ range $container := $ }}
    {{ range $address := $container.Addresses }}
        {{ if $address.HostPort }}
            {{ $exposedContainers = append $exposedContainers $container }}
            {{ break }}
        {{ end }}
    {{ end }}
{{ end }}

{{/* Only keep containers with webproxy labels */}}
{{ $webproxyfiedContainers := list }}
{{ range $container := $exposedContainers }}
    {{ range $label, $value := $container.Labels }}
        {{ if hasPrefix "webproxy." $label }}
            {{ $webproxyfiedContainers = append $webproxyfiedContainers $container }}
            {{ break }}
        {{ end }}
    {{ end }}
{{ end }}


{{/* Group containers by subdomain and sort them by path */}}
{{ range $subdomain, $containers := groupByLabelWithDefault $webproxyfiedContainers "webproxy.subdomain" "" }}
{{ $containersByPath := dict }}
{{ range $container := $containers }}
{{ $containersByPath = set $containersByPath (index $container.Labels "webproxy.path" | default "") $container }}
{{ end }}
<VirtualHost *:80>

    {{ if eq $subdomain "" }}
    ServerName {{ $topdomain }}
    {{ else }}
    ServerName {{ $subdomain }}.{{ $topdomain }}
    {{ end }}

    {{ with index ($containers | first).Labels "webproxy.serveradmin" }}
    ServerAdmin {{ . }}
    {{ end }}

    {{ range $path, $container := $containersByPath }}
    # Container {{ $container.Name }}
    <Location "/{{ $path }}">
    {{ if not (eq $path "") }}
        RewriteEngine On
        RewriteCond %{REQUEST_URI} ^/{{ $path }}$
        RewriteRule ^(.*)$ /{{ $path }}/ [R=301,L]
    </Location>
    <Location "/{{ $path }}/">
    {{ end }}
        {{ $address := where $container.Addresses "Port" (index $container.Labels "webproxy.port") | default (sortObjectsByKeysAsc $container.Addresses "Port") | first }}
        {{ $port := $address.HostPort }}
        {{ $ip := ($container.Networks | first).Gateway }}

        {{ if index $container.Labels "webproxy.websockets" }}
        RewriteEngine On
        RewriteCond %{HTTP:Upgrade} websocket [NC]
        RewriteCond %{HTTP:Connection} Upgrade [NC]
        RewriteRule (.*) ws://{{ $ip }}:{{ $port }}/$1 [P,L]
        {{ end }}

        ProxyPass http://{{ $ip }}:{{ $port }}/ nocanon
        ProxyPassReverse http://{{ $ip }}:{{ $port }}/

        {{ with index $container.Labels "webproxy.errors" }}
        {{ range $error := (split . ",") }}
        ErrorDocument {{ split $error ":" | first }} {{ index (split $error ":") 1 }}
        {{ end }}
        {{ end }}

        {{ with index $container.Labels "webproxy.custom" }}
        {{ . }}
        {{ end }}
    </Location>
    {{ end }}

    {{ if eq $subdomain "" }}
    {{ with env "IGNORE_PATHS" }}
    # Paths to ignore
    {{ range $ignore_path := (split . ",") }}
    <Location "/{{ $ignore_path }}">
        ProxyPass !
    </Location>
    {{ end }}
    {{ end }}
    {{ end }}

    #ErrorLog ${APACHE_LOG_DIR}/error.log
    #CustomLog ${APACHE_LOG_DIR}/access.log combined

</VirtualHost>
{{ end }}